
version: '3.8' # Specify the version of the Docker Compose file format

services:
  web:
    build:
      context: . # Use the Dockerfile in the current directory
      dockerfile: Dockerfile
    container_name: expense_tracker_web
    # command: python manage.py runserver 0.0.0.0:8000 # Overrides CMD in Dockerfile if needed, or passed to entrypoint.sh
    # If using entrypoint.sh, this command is passed as arguments.
    # For development server:
    command: ["runserver"]
    # For Gunicorn (production example, ensure gunicorn is in requirements.txt):
    # command: ["gunicorn", "expense_tracker_project.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "3"]
    volumes:
      - /home/user/db:/app/db
      # - .:/app # Mount the current directory on the host to /app in the container
               # This allows for live code reloading during development.
      # - static_volume:/app/staticfiles # For serving static files in production with a dedicated volume
      # - media_volume:/app/mediafiles   # For serving media files in production
    ports:
      - "8000:8000" # Map port 8000 on the host to port 8000 in the container
    environment:
      - SECRET_KEY=your_strong_secret_key_for_docker # Change this!
      - DEBUG=1 # Set to 0 in production
      # - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] .yourdomain.com # Space separated
      # --- Database Environment Variables (Example for PostgreSQL) ---
      # - DB_ENGINE=django.db.backends.postgresql
      # - DB_NAME=your_db_name
      # - DB_USER=your_db_user
      # - DB_PASSWORD=your_db_password
      # - DB_HOST=db # This would be the service name of your PostgreSQL container
      # - DB_PORT=5432
    depends_on:
      [] # Add 'db' here if you add a database service: - db
    restart: unless-stopped # Or 'always', 'on-failure'

  # --- Optional PostgreSQL Database Service ---
  # db:
  #   image: postgres:15-alpine
  #   container_name: expense_tracker_db
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/ # Persist database data
  #   environment:
  #     - POSTGRES_DB=your_db_name
  #     - POSTGRES_USER=your_db_user
  #     - POSTGRES_PASSWORD=your_db_password
  #   ports:
  #     - "5433:5432" # Expose PostgreSQL on host port 5433 (optional)
  #   restart: unless-stopped

# --- Named Volumes (for data persistence) ---
# volumes:
#   postgres_data:
#   static_volume:
#   media_volume:
